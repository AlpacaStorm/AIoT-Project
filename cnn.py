# -*- coding: utf-8 -*-
"""cnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tYFEPFw6Gl9EcZwWKMFG1CE5xgwLJ2G2
"""

# Commented out IPython magic to ensure Python compatibility.
# % tensorflow_version 2.x

import tensorflow as tf
import cv2
import numpy as np
import os

data=[]

for file in os.listdir('garbage/0'):
    img = cv2.imread('garbage/0/'+file,cv2.IMREAD_COLOR)

    data.append(img)
    
x0array = np.array(data)

data=[]

for file in os.listdir('garbage/1'):
    img = cv2.imread('garbage/1/'+file,cv2.IMREAD_COLOR)

    data.append(img)
    
x1array = np.array(data)

data=[]

for file in os.listdir('garbage/2'):
    img = cv2.imread('garbage/2/'+file,cv2.IMREAD_COLOR)

    data.append(img)
    
x2array = np.array(data)

print(len(x0array),len(x1array),len(x2array))

y0 = np.full((80),0)
y1 = np.full((80),1)
y2 = np.full((65),2)

import random

c0 = list(zip(x0array,y0))
c1 = list(zip(x1array,y1))
c2 = list(zip(x2array,y2))

random.shuffle(c0)
random.shuffle(c1)
random.shuffle(c2)

x0array,y0 = zip(*c0)
x1array,y1 = zip(*c1)
x2array,y2 = zip(*c2)

x0array = np.array(x0array)
x1array = np.array(x1array)
x2array = np.array(x2array)
y0 = np.array(y0)
y1 = np.array(y1)
y2 = np.array(y2)


x_train = np.concatenate((x0array[:60],x1array[:60],x2array[:45]))
y_train = np.concatenate((y0[:60],y1[:60],y2[:45]))

x_test = np.concatenate((x0array[60:],x1array[60:],x2array[45:]))
y_test = np.concatenate((y0[60:],y1[60:],y2[45:]))




x_train=x_train/255
x_test=x_test/255



from tensorflow import keras
from tensorflow.keras import layers

CNN=keras.Sequential(name="CNN")
CNN.add(layers.Conv2D(32,(3,3),activation='relu',input_shape=(300,400,3)))
CNN.add(layers.Conv2D(64,(3,3),activation='relu'))
CNN.add(layers.MaxPool2D(2,2))
CNN.add(layers.Flatten())
CNN.add(layers.Dense(128,activation='relu'))
CNN.add(layers.Dense(64,activation='relu'))
CNN.add(layers.Dense(3,activation='softmax'))
#keras.utils.plot_model(CNN,show_shapes=True)

CNN.compile(optimizer='Adam',loss=keras.losses.sparse_categorical_crossentropy,metrics=['accuracy'])

CNN.fit(x_train,y_train,epochs=5)



predict_x=CNN.predict(x_test) 
classes_x=np.argmax(predict_x,axis=1)
count=0
for i in range(len(y_test)):
  if(classes_x[i]!=y_test[i]):
    count+=1

accuracy=1-(count/len(y_test))

print('test',accuracy)
print(classes_x)
print(y_test)

CNN.save('cnn')